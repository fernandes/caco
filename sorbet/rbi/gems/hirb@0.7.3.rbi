# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hirb` gem.
# Please instead update this file by running `bin/tapioca gem hirb`.

# Most of Hirb's functionality is in Hirb::View.
# For a tutorial  on configuring and creating views see Hirb::View. For a tutorial on dynamic views see Hirb::DynamicView.
#
# == Config Files
# Hirb can have multiple config files defined by config_files(). These config files
# have the following top level keys:
# [*:output*] This hash is used by the formatter object. See Hirb::Formatter.config for its format.
# [*:width*]  Width of the terminal/console. Defaults to Hirb::View::DEFAULT_WIDTH or possibly autodetected when Hirb is enabled.
# [*:height*]  Height of the terminal/console. Defaults to Hirb::View::DEFAULT_HEIGHT or possibly autodetected when Hirb is enabled.
# [*:formatter*] Boolean which determines if the formatter is enabled. Defaults to true.
# [*:pager*] Boolean which determines if the pager is enabled. Defaults to true.
# [*:pager_command*] Command to be used for paging. Command can have options after it i.e. 'less -r'.
#                    Defaults to common pagers i.e. less and more if detected.
# [*:ignore_errors*] Boolean which ignores internal view errors and continues with original view
#                    (i.e. #inspect for irb). Defaults to false.
module Hirb
  class << self
    # Adds views. See Hirb::DynamicView.add for details.
    #
    # source://hirb//lib/hirb.rb#52
    def add_dynamic_view(view, options, &block); end

    # Adds views. See Hirb::View.add for details.
    #
    # source://hirb//lib/hirb.rb#47
    def add_view(view, options); end

    # Returns the value of attribute config.
    #
    # source://hirb//lib/hirb.rb#74
    def config(reload = T.unsafe(nil)); end

    # Sets the attribute config
    #
    # @param value the value to set the attribute config to.
    #
    # source://hirb//lib/hirb.rb#34
    def config=(_arg0); end

    # Returns the value of attribute config_files.
    #
    # source://hirb//lib/hirb.rb#59
    def config_files; end

    # Sets the attribute config_files
    #
    # @param value the value to set the attribute config_files to.
    #
    # source://hirb//lib/hirb.rb#34
    def config_files=(_arg0); end

    # :stopdoc:
    #
    # source://hirb//lib/hirb.rb#64
    def default_config_files; end

    # Disables view functionality. See Hirb::View.disable for details.
    #
    # source://hirb//lib/hirb.rb#42
    def disable; end

    # Enables view functionality. See Hirb::View.enable for details.
    #
    # source://hirb//lib/hirb.rb#37
    def enable(options = T.unsafe(nil)); end

    # source://hirb//lib/hirb.rb#69
    def read_config_file(file = T.unsafe(nil)); end
  end
end

# This module is meant to be extended to provide methods for use in a console/irb shell.
# For example:
#    >> extend Hirb::Console
#    >> view 'some string', :class=>Some::String::Formatter
#    >> table [[:row1], [:row2]]
module Hirb::Console
  # Renders a menu given an array using Hirb::Menu.render.
  #
  # source://hirb//lib/hirb/console.rb#39
  def menu(output, options = T.unsafe(nil), &block); end

  # Renders a table for the given object. Takes same options as Hirb::Helpers::Table.render.
  #
  # source://hirb//lib/hirb/console.rb#29
  def table(output, options = T.unsafe(nil)); end

  # Renders any specified view for the given object. Takes same options as Hirb::View.render_output.
  #
  # source://hirb//lib/hirb/console.rb#34
  def view(output, options = T.unsafe(nil)); end

  class << self
    # Takes same arguments and options as render_output() but returns formatted output instead of rendering it.
    #
    # source://hirb//lib/hirb/console.rb#22
    def format_output(output, options = T.unsafe(nil), &block); end

    # A console version of render_output() which takes its same options but allows for shorthand. All options are passed to
    # the helper except for the formatter options. Formatter options are :class, :method and :output_method.
    # Examples:
    #   render_output output, :class=>:tree :type=>:directory
    #   # is the same as:
    #   render_output output, :class=>:tree, :options=> {:type=>:directory}
    #
    # source://hirb//lib/hirb/console.rb#16
    def render_output(output, options = T.unsafe(nil)); end
  end
end

# This module extends a Helper with the ability to have dynamic views for configured output classes.
# After a Helper has extended this module, it can use it within a render() by calling
# dynamic_options() to get dynamically generated options for the object it's rendering. See Hirb::Helpers::AutoTable as an example.
#
# == Dynamic Views
# Whereas normal views are generated from helpers with static helper options, dynamic views are generated from helpers and
# dynamically generated helper options. Let's look at an example for Rails' ActiveRecord classes:
#
#   Hirb.add_dynamic_view("ActiveRecord::Base", :helper=>:auto_table) {|obj|
#    {:fields=>obj.class.column_names} }
#
# From this dynamic view definition, _any_ ActiveRecord model class will render a table with the correct fields, since the fields
# are extracted from the output object's class at runtime. Note that dynamic view definitions should return a hash of helper options.
#
# To define multiple dynamic views, create a Views module where each method ending in '\_view' maps to a class/module:
#
#   module Hirb::Views::ORM
#     def data_mapper__resource_view(obj)
#       {:fields=>obj.class.properties.map {|e| e.name }}
#     end
#
#     def sequel__model_view(obj)
#       {:fields=>obj.class.columns}
#     end
#   end
#
#   Hirb.add_dynamic_view Hirb::Views::ORM, :helper=>:auto_table
#
# In this example, 'data_mapper__resource_view' maps to DataMapper::Resource and 'sequel__model_view' maps to Sequel::Model.
# Note that when mapping method names to class names, '__' maps to '::' and '_' signals the next letter to be capitalized.
module Hirb::DynamicView
  # :stopdoc:
  #
  # source://hirb//lib/hirb/dynamic_view.rb#84
  def add_module(mod); end

  # Returns a hash of options based on dynamic views defined for the object's ancestry. If no config is found returns nil.
  #
  # source://hirb//lib/hirb/dynamic_view.rb#69
  def dynamic_options(obj); end

  # source://hirb//lib/hirb/dynamic_view.rb#99
  def method_to_class(meth); end

  # source://hirb//lib/hirb/dynamic_view.rb#92
  def update_config(meths); end

  # source://hirb//lib/hirb/dynamic_view.rb#103
  def view_method_classes; end

  # Stores view methods that a Helper has been given via DynamicView.add
  #
  # source://hirb//lib/hirb/dynamic_view.rb#109
  def view_methods; end

  class << self
    # Add dynamic views to output class(es) for a given helper. If defining one view, the first argument is the output class
    # and a block defines the dynamic view. If defining multiple views, the first argument should be a Views::* module where
    # each method in the module ending in _view defines a view for an output class. To map output classes to method names in
    # a Views module, translate'::' to '__' and a capital letter translates to a '_' and a lowercase letter.
    # ==== Options:
    # [*:helper*] Required option. Helper class that view(s) use to format. Hirb::Helpers::AutoTable is the only valid
    #             helper among default helpers. Can be given in aliased form i.e. :auto_table -> Hirb::Helpers::AutoTable.
    #
    # Examples:
    #    Hirb.add_dynamic_view Hirb::Views::ORM, :helper=>:auto_table
    #    Hirb.add_dynamic_view("ActiveRecord::Base", :helper=>:auto_table) {|obj| {:fields=>obj.class.column_names} }
    #
    # @raise [ArgumentError]
    #
    # source://hirb//lib/hirb/dynamic_view.rb#44
    def add(view, options, &block); end

    # source://hirb//lib/hirb/dynamic_view.rb#64
    def class_to_method(mod); end

    # source://hirb//lib/hirb/dynamic_view.rb#55
    def generate_single_view_module(output_mod, &block); end
  end
end

# A Formatter object formats an output object (using Formatter.format_output) into a string based on the views defined
# for its class and/or ancestry.
class Hirb::Formatter
  # @return [Formatter] a new instance of Formatter
  #
  # source://hirb//lib/hirb/formatter.rb#17
  def initialize(additional_config = T.unsafe(nil)); end

  # source://hirb//lib/hirb/formatter.rb#64
  def _format_output(output, options, &block); end

  # source://hirb//lib/hirb/formatter.rb#110
  def add_klass_config_if_true(hash, klass); end

  # Adds the view for the given class and view hash config. See Formatter.config for valid keys for view hash.
  #
  # source://hirb//lib/hirb/formatter.rb#42
  def add_view(klass, view_config); end

  # source://hirb//lib/hirb/formatter.rb#101
  def build_klass_config(output_class); end

  # source://hirb//lib/hirb/formatter.rb#91
  def call_output_method(output_method, output); end

  # A hash of Ruby class strings mapped to view hashes. A view hash must have at least a :method, :output_method
  # or :class option for a view to be applied to an output. A view hash has the following keys:
  # [*:method*] Specifies a global (Kernel) method to do the formatting.
  # [*:class*] Specifies a class to do the formatting, using its render() class method. If a symbol it's converted to a corresponding
  #            Hirb::Helpers::* class if it exists.
  # [*:output_method*] Specifies a method or proc to call on output before passing it to a helper. If the output is an array, it's applied
  #                    to every element in the array.
  # [*:options*] Options to pass the helper method or class.
  # [*:ancestor*] Boolean which when true causes subclasses of the output class to inherit its config. This doesn't effect the current
  #               output class. Defaults to false. This is used by ActiveRecord classes.
  #
  #   Examples:
  #     {'WWW::Delicious::Element'=>{:class=>'Hirb::Helpers::ObjectTable', :ancestor=>true, :options=>{:max_width=>180}}}
  #     {'Date'=>{:class=>:auto_table, :ancestor=>true}}
  #     {'Hash'=>{:method=>:puts}}
  #
  # source://hirb//lib/hirb/formatter.rb#37
  def config; end

  # source://hirb//lib/hirb/formatter.rb#86
  def determine_output_class(output); end

  # This method looks for an output object's view in Formatter.config and then Formatter.dynamic_config.
  # If a view is found, a stringified view is returned based on the object. If no view is found, nil is returned. The options this
  # class takes are a view hash as described in Formatter.config. These options will be merged with any existing helper
  # config hash an output class has in Formatter.config. Any block given is passed along to a helper class.
  #
  # source://hirb//lib/hirb/formatter.rb#52
  def format_output(output, options = T.unsafe(nil), &block); end

  # Internal view options built from user-defined ones. Options are built by recursively merging options from oldest
  # ancestors to the most recent ones.
  #
  # source://hirb//lib/hirb/formatter.rb#97
  def klass_config(output_class); end

  # source://hirb//lib/hirb/formatter.rb#79
  def parse_console_options(options); end

  # source://hirb//lib/hirb/formatter.rb#121
  def reset_klass_config; end

  # :stopdoc:
  #
  # source://hirb//lib/hirb/formatter.rb#60
  def to_a_classes; end

  class << self
    # This config is used by Formatter.format_output to lazily load dynamic views defined with Hirb::DynamicView.
    # This hash has the same format as Formatter.config.
    #
    # source://hirb//lib/hirb/formatter.rb#8
    def dynamic_config; end

    # This config is used by Formatter.format_output to lazily load dynamic views defined with Hirb::DynamicView.
    # This hash has the same format as Formatter.config.
    #
    # source://hirb//lib/hirb/formatter.rb#8
    def dynamic_config=(_arg0); end

    # Array of classes whose objects respond to :to_a and allow the first
    # element of the converted array to determine the output class.
    #
    # source://hirb//lib/hirb/formatter.rb#12
    def to_a_classes; end

    # Array of classes whose objects respond to :to_a and allow the first
    # element of the converted array to determine the output class.
    #
    # source://hirb//lib/hirb/formatter.rb#12
    def to_a_classes=(_arg0); end
  end
end

module Hirb::Helpers
  class << self
    # source://hirb//lib/hirb/helpers.rb#4
    def helper_class(klass); end
  end
end

# This helper wraps around the other table helpers i.e. Hirb::Helpers::Table while
# providing default helper options via Hirb::DynamicView. Using these default options, this
# helper supports views for the following modules/classes:
# ActiveRecord::Base, CouchFoo::Base, CouchPotato::Persistence, CouchRest::ExtendedDocument,
# DBI::Row, DataMapper::Resource, Friendly::Document, MongoMapper::Document, MongoMapper::EmbeddedDocument,
# Mongoid::Document, Ripple::Document, Sequel::Model.
class Hirb::Helpers::AutoTable < ::Hirb::Helpers::Table
  extend ::Hirb::DynamicView
  extend ::Hirb::Views::Rails
  extend ::Hirb::Views::ORM
  extend ::Hirb::Views::MongoDb
  extend ::Hirb::Views::CouchDb
  extend ::Hirb::Views::MiscDb

  class << self
    # Takes same options as Hirb::Helpers::Table.render except as noted below.
    #
    # ==== Options:
    # [:table_class] Explicit table class to use for rendering. Defaults to
    #                Hirb::Helpers::ObjectTable if output is not an Array or Hash. Otherwise
    #                defaults to Hirb::Helpers::Table.
    #
    # source://hirb//lib/hirb/helpers/auto_table.rb#16
    def render(output, options = T.unsafe(nil)); end
  end
end

# Creates a markdown table for github
class Hirb::Helpers::MarkdownTable < ::Hirb::Helpers::Table
  class << self
    # source://hirb//lib/hirb/helpers/markdown_table.rb#11
    def render(rows, options = T.unsafe(nil)); end
  end
end

# source://hirb//lib/hirb/helpers/markdown_table.rb#3
Hirb::Helpers::MarkdownTable::CHARS = T.let(T.unsafe(nil), Hash)

class Hirb::Helpers::ObjectTable < ::Hirb::Helpers::Table
  class << self
    # Rows are any ruby objects. Takes same options as Hirb::Helpers::Table.render except as noted below.
    #
    # ==== Options:
    # [:fields] Methods of the object to represent as columns. Defaults to [:to_s].
    #
    # source://hirb//lib/hirb/helpers/object_table.rb#6
    def render(rows, options = T.unsafe(nil)); end
  end
end

class Hirb::Helpers::ParentChildTree < ::Hirb::Helpers::Tree
  class << self
    # source://hirb//lib/hirb/helpers/parent_child_tree.rb#19
    def build_node(node, level); end

    # Starting with the given node, this builds a tree by recursively calling a children method.
    # Takes same options as Hirb::Helper::Table.render with some additional ones below.
    # ==== Options:
    # [:value_method] Method or proc to call to display as a node's value. If not given, uses :name if node
    #                 responds to :name or defaults to :object_id.
    # [:children_method] Method or proc to call to obtain a node's children. Default is :children.
    #
    # source://hirb//lib/hirb/helpers/parent_child_tree.rb#9
    def render(root_node, options = T.unsafe(nil)); end
  end
end

class Hirb::Helpers::TabTable < ::Hirb::Helpers::Table
  # source://hirb//lib/hirb/helpers/tab_table.rb#21
  def render_footer; end

  # source://hirb//lib/hirb/helpers/tab_table.rb#9
  def render_header; end

  # source://hirb//lib/hirb/helpers/tab_table.rb#17
  def render_rows; end

  # source://hirb//lib/hirb/helpers/tab_table.rb#13
  def render_table_header; end

  class << self
    # Renders a tab-delimited table
    #
    # source://hirb//lib/hirb/helpers/tab_table.rb#5
    def render(rows, options = T.unsafe(nil)); end
  end
end

# source://hirb//lib/hirb/helpers/tab_table.rb#2
Hirb::Helpers::TabTable::DELIM = T.let(T.unsafe(nil), String)

class Hirb::Helpers::Table
  # source://hirb//lib/hirb/helpers/table.rb#165
  def initialize(rows, options = T.unsafe(nil)); end

  # source://hirb//lib/hirb/helpers/table.rb#312
  def actual_width; end

  # source://hirb//lib/hirb/helpers/table.rb#371
  def array_to_indices_hash(array); end

  # source://hirb//lib/hirb/helpers/table.rb#356
  def call_filter(filter, val); end

  # source://hirb//lib/hirb/helpers/table.rb#159
  def chars; end

  # source://hirb//lib/hirb/helpers/table.rb#322
  def default_field_lengths; end

  # source://hirb//lib/hirb/helpers/table.rb#301
  def enforce_field_constraints; end

  # source://hirb//lib/hirb/helpers/table.rb#164
  def field_lengths; end

  # source://hirb//lib/hirb/helpers/table.rb#164
  def field_lengths=(_arg0); end

  # source://hirb//lib/hirb/helpers/table.rb#164
  def fields; end

  # source://hirb//lib/hirb/helpers/table.rb#164
  def fields=(_arg0); end

  # source://hirb//lib/hirb/helpers/table.rb#344
  def filter_values(rows); end

  # source://hirb//lib/hirb/helpers/table.rb#270
  def format_cell(value, cell_width); end

  # source://hirb//lib/hirb/helpers/table.rb#266
  def format_values(values); end

  # source://hirb//lib/hirb/helpers/table.rb#306
  def max_fields; end

  # source://hirb//lib/hirb/helpers/table.rb#164
  def max_fields=(_arg0); end

  # source://hirb//lib/hirb/helpers/table.rb#232
  def render; end

  # source://hirb//lib/hirb/helpers/table.rb#259
  def render_border(which); end

  # source://hirb//lib/hirb/helpers/table.rb#248
  def render_footer; end

  # source://hirb//lib/hirb/helpers/table.rb#244
  def render_header; end

  # source://hirb//lib/hirb/helpers/table.rb#278
  def render_rows; end

  # source://hirb//lib/hirb/helpers/table.rb#286
  def render_table_description; end

  # source://hirb//lib/hirb/helpers/table.rb#252
  def render_table_header; end

  # source://hirb//lib/hirb/helpers/table.rb#181
  def set_fields(rows); end

  # source://hirb//lib/hirb/helpers/table.rb#334
  def set_filter_defaults(rows); end

  # source://hirb//lib/hirb/helpers/table.rb#218
  def set_headers; end

  # source://hirb//lib/hirb/helpers/table.rb#198
  def set_rows(rows); end

  # source://hirb//lib/hirb/helpers/table.rb#291
  def setup_field_lengths; end

  # source://hirb//lib/hirb/helpers/table.rb#361
  def validate_values(rows); end

  # source://hirb//lib/hirb/helpers/table.rb#317
  def width; end

  # source://hirb//lib/hirb/helpers/table.rb#164
  def width=(_arg0); end

  class << self
    # source://hirb//lib/hirb/helpers/table.rb#152
    def filter_any; end

    # source://hirb//lib/hirb/helpers/table.rb#152
    def filter_any=(_arg0); end

    # source://hirb//lib/hirb/helpers/table.rb#150
    def filter_classes; end

    # source://hirb//lib/hirb/helpers/table.rb#150
    def filter_classes=(_arg0); end

    # source://hirb//lib/hirb/helpers/table.rb#154
    def last_table; end

    # source://hirb//lib/hirb/helpers/table.rb#154
    def last_table=(_arg0); end

    # source://hirb//lib/hirb/helpers/table.rb#117
    def render(rows, options = T.unsafe(nil)); end

    private

    # source://hirb//lib/hirb/helpers/table.rb#125
    def choose_style(rows, options); end
  end
end

# source://hirb//lib/hirb/helpers/table.rb#62
Hirb::Helpers::Table::BORDER_LENGTH = T.let(T.unsafe(nil), Integer)

# source://hirb//lib/hirb/helpers/table.rb#66
Hirb::Helpers::Table::CHARS = T.let(T.unsafe(nil), Hash)

# Contains filter methods used by :filters option. To define a custom filter, simply open this module and create a method
# that take one argument, the value you will be filtering.
module Hirb::Helpers::Table::Filters
  extend ::Hirb::Helpers::Table::Filters

  # source://hirb//lib/hirb/helpers/table/filters.rb#6
  def comma_join(arr); end
end

# source://hirb//lib/hirb/helpers/table.rb#63
Hirb::Helpers::Table::MIN_FIELD_LENGTH = T.let(T.unsafe(nil), Integer)

# Resizes a table's fields to the table's max width.
class Hirb::Helpers::Table::Resizer
  # @return [Resizer] a new instance of Resizer
  #
  # source://hirb//lib/hirb/helpers/table/resizer.rb#13
  def initialize(table); end

  # source://hirb//lib/hirb/helpers/table/resizer.rb#56
  def add_extra_width; end

  # Simple algorithm which allows smaller fields to be displayed while
  # restricting longer fields to an average_long_field
  #
  # source://hirb//lib/hirb/helpers/table/resizer.rb#27
  def adjust_long_fields; end

  # Produces a field_lengths which meets the @width requirement
  #
  # source://hirb//lib/hirb/helpers/table/resizer.rb#43
  def default_restrict_field_lengths; end

  # :stopdoc:
  #
  # source://hirb//lib/hirb/helpers/table/resizer.rb#12
  def field_lengths; end

  # source://hirb//lib/hirb/helpers/table/resizer.rb#71
  def remaining_width(field); end

  # source://hirb//lib/hirb/helpers/table/resizer.rb#19
  def resize; end

  # source://hirb//lib/hirb/helpers/table/resizer.rb#77
  def sum(arr); end

  class << self
    # Modifies field_lengths to fit within width. Also enforces a table's max_fields.
    #
    # source://hirb//lib/hirb/helpers/table/resizer.rb#5
    def resize!(table); end
  end
end

class Hirb::Helpers::Table::TooManyFieldsForWidthError < ::StandardError; end

# Base tree class which given an array of nodes produces different types of trees.
# The types of trees currently are:
# * basic:
#    0
#      1
#        2
#        3
#      4
#
# * directory:
#    0
#    |-- 1
#    |   |-- 2
#    |   `-- 3
#    `-- 4
#
# * number:
#    1. 0
#      1. 1
#        1. 2
#        2. 3
#      2. 4
#
# Tree nodes can be given as an array of arrays or an array of hashes.
# To render the above basic tree with an array of hashes:
#   Hirb::Helpers::Tree.render([{:value=>0, :level=>0}, {:value=>1, :level=>1}, {:value=>2, :level=>2},
#     {:value=>3, :level=>2}, {:value=>4, :level=>1}])
# Note from the hash keys that :level refers to the depth of the tree while :value refers to the text displayed
# for a node.
#
# To render the above basic tree with an array of arrays:
#   Hirb::Helpers::Tree.render([[0,0], [1,1], [2,2], [2,3], [1,4]])
# Note that the each array pair consists of the level and the value for the node.
class Hirb::Helpers::Tree
  # @return [Tree] a new instance of Tree
  #
  # source://hirb//lib/hirb/helpers/tree.rb#57
  def initialize(input_nodes, options = T.unsafe(nil)); end

  # walks tree accumulating last nodes per unique parent+level
  #
  # source://hirb//lib/hirb/helpers/tree.rb#130
  def mark_last_nodes_per_level; end

  # :stopdoc:
  #
  # source://hirb//lib/hirb/helpers/tree.rb#55
  def nodes; end

  # :stopdoc:
  #
  # source://hirb//lib/hirb/helpers/tree.rb#55
  def nodes=(_arg0); end

  # source://hirb//lib/hirb/helpers/tree.rb#71
  def render; end

  # source://hirb//lib/hirb/helpers/tree.rb#119
  def render_basic; end

  # source://hirb//lib/hirb/helpers/tree.rb#77
  def render_description; end

  # source://hirb//lib/hirb/helpers/tree.rb#96
  def render_directory; end

  # source://hirb//lib/hirb/helpers/tree.rb#91
  def render_nodes; end

  # source://hirb//lib/hirb/helpers/tree.rb#108
  def render_number; end

  # source://hirb//lib/hirb/helpers/tree.rb#81
  def render_tree; end

  # source://hirb//lib/hirb/helpers/tree.rb#123
  def validate_nodes; end

  class << self
    # Main method which renders a tree.
    # ==== Options:
    # [:type] Type of tree. Either :basic, :directory or :number. Default is :basic.
    # [:validate] Boolean to validate tree. Checks to see if all nodes have parents. Raises ParentlessNodeError if
    #             an invalid node is found. Default is false.
    # [:indent] Number of spaces to indent between levels for basic + number trees. Default is 4.
    # [:limit] Limits the level or depth of a tree that is displayed. Root node is level 0.
    # [:description] Displays brief description about tree ie how many nodes it has.
    # [:multi_line_nodes] Handles multi-lined nodes by indenting their newlines. Default is false.
    #  Examples:
    #     Hirb::Helpers::Tree.render([[0, 'root'], [1, 'child']], :type=>:directory)
    #
    # source://hirb//lib/hirb/helpers/tree.rb#49
    def render(nodes, options = T.unsafe(nil)); end
  end
end

# :startdoc:
class Hirb::Helpers::Tree::Node < ::Hash
  # @raise [MissingLevelError]
  # @return [Node] a new instance of Node
  #
  # source://hirb//lib/hirb/helpers/tree.rb#142
  def initialize(hash); end

  # source://hirb//lib/hirb/helpers/tree.rb#174
  def get_parents_character(parent_chars); end

  # source://hirb//lib/hirb/helpers/tree.rb#157
  def next; end

  # source://hirb//lib/hirb/helpers/tree.rb#153
  def parent; end

  # source://hirb//lib/hirb/helpers/tree.rb#161
  def previous; end

  # refers to characters which connect parent nodes
  #
  # source://hirb//lib/hirb/helpers/tree.rb#168
  def render_parent_characters; end

  # @return [Boolean]
  #
  # source://hirb//lib/hirb/helpers/tree.rb#165
  def root?; end

  # source://hirb//lib/hirb/helpers/tree.rb#149
  def value(indent = T.unsafe(nil)); end
end

class Hirb::Helpers::Tree::Node::MissingLevelError < ::StandardError; end
class Hirb::Helpers::Tree::Node::MissingValueError < ::StandardError; end
class Hirb::Helpers::Tree::ParentlessNodeError < ::StandardError; end

class Hirb::Helpers::UnicodeTable < ::Hirb::Helpers::Table
  class << self
    # Renders a unicode table
    #
    # source://hirb//lib/hirb/helpers/unicode_table.rb#12
    def render(rows, options = T.unsafe(nil)); end
  end
end

# source://hirb//lib/hirb/helpers/unicode_table.rb#3
Hirb::Helpers::UnicodeTable::CHARS = T.let(T.unsafe(nil), Hash)

class Hirb::Helpers::VerticalTable < ::Hirb::Helpers::Table
  # source://hirb//lib/hirb/helpers/vertical_table.rb#17
  def render_footer; end

  # source://hirb//lib/hirb/helpers/vertical_table.rb#16
  def render_header; end

  # source://hirb//lib/hirb/helpers/vertical_table.rb#19
  def render_rows; end

  # :stopdoc:
  #
  # source://hirb//lib/hirb/helpers/vertical_table.rb#12
  def setup_field_lengths; end

  class << self
    # Renders a vertical table using the same options as Hirb::Helpers::Table.render except for the ones below
    # and :max_fields, :vertical and :max_width which aren't used.
    # ==== Options:
    # [:hide_empty] Boolean which hides empty values (nil or '') from being displayed. Default is false.
    #
    # source://hirb//lib/hirb/helpers/vertical_table.rb#7
    def render(rows, options = T.unsafe(nil)); end
  end
end

# This class provides a menu using Hirb's table helpers by default to display choices.
# Menu choices (syntax at Hirb::Util.choose_from_array) refer to rows. However, when in
# two_d mode, choices refer to specific cells by appending a ':field' to a choice.
# A field name can be an abbreviated. Menus can also have an action mode, which turns the
# menu prompt into a commandline that executes the choices as arguments and uses methods as
# actions/commands.
class Hirb::Menu
  # :stopdoc:
  #
  # @return [Menu] a new instance of Menu
  #
  # source://hirb//lib/hirb/menu.rb#49
  def initialize(options = T.unsafe(nil)); end

  # source://hirb//lib/hirb/menu.rb#192
  def action_object; end

  # source://hirb//lib/hirb/menu.rb#179
  def add_chosen_to_args(items); end

  # source://hirb//lib/hirb/menu.rb#89
  def choose_from_menu; end

  # source://hirb//lib/hirb/menu.rb#169
  def cleanup_new_args; end

  # source://hirb//lib/hirb/menu.rb#185
  def command; end

  # source://hirb//lib/hirb/menu.rb#200
  def default_field; end

  # source://hirb//lib/hirb/menu.rb#108
  def execute_action(chosen); end

  # Has to be called after displaying menu
  #
  # source://hirb//lib/hirb/menu.rb#205
  def fields; end

  # source://hirb//lib/hirb/menu.rb#63
  def get_input; end

  # source://hirb//lib/hirb/menu.rb#76
  def get_readline_input(prompt); end

  # source://hirb//lib/hirb/menu.rb#147
  def input_to_tokens(input); end

  # source://hirb//lib/hirb/menu.rb#117
  def invoke(cmd, args); end

  # source://hirb//lib/hirb/menu.rb#130
  def map_tokens(tokens); end

  # source://hirb//lib/hirb/menu.rb#121
  def parse_input(input); end

  # source://hirb//lib/hirb/menu.rb#154
  def parse_word(word); end

  # source://hirb//lib/hirb/menu.rb#82
  def pre_prompt; end

  # @return [Boolean]
  #
  # source://hirb//lib/hirb/menu.rb#218
  def readline_loads?; end

  # source://hirb//lib/hirb/menu.rb#55
  def render(output, &block); end

  # @return [Boolean]
  #
  # source://hirb//lib/hirb/menu.rb#143
  def return_cell_values?; end

  # source://hirb//lib/hirb/menu.rb#196
  def split_input_args(input); end

  # @return [Boolean]
  #
  # source://hirb//lib/hirb/menu.rb#210
  def table_helper_class?; end

  # source://hirb//lib/hirb/menu.rb#214
  def unalias_field(field); end

  # @raise [Error]
  #
  # source://hirb//lib/hirb/menu.rb#101
  def unasked_choice; end

  class << self
    # This method will return an array unless it's exited by simply pressing return, which returns nil.
    # If given a block, the block will yield if and with any menu items are chosen.
    # All options except for the ones below are passed to render the menu.
    #
    # ==== Options:
    # [*:helper_class*]  Helper class to render menu. Helper class is expected to implement numbering given a :number option.
    #                    To use a very basic menu, set this to false. Defaults to Hirb::Helpers::AutoTable.
    # [*:prompt*]  String for menu prompt. Defaults to "Choose: ".
    # [*:ask*] Always ask for input, even if there is only one choice. Default is true.
    # [*:directions*] Display directions before prompt. Default is true.
    # [*:readline*] Use readline to get user input if available. Input strings are added to readline history. Default is false.
    # [*:two_d*] Turn menu into a 2 dimensional (2D) menu by allowing user to pick values from table cells. Default is false.
    # [*:default_field*] Default field for a 2D menu. Defaults to first field in a table.
    # [*:action*] Turn menu into an action menu by letting user pass menu choices as an argument to a method/command.
    #             A menu choice's place amongst other arguments is preserved. Default is false.
    # [*:multi_action*] Execute action menu multiple times iterating over the menu choices. Default is false.
    # [*:action_object*] Object that takes method/command calls. Default is main.
    # [*:command*] Default method/command to call when no command given.
    # [*:reopen*] Reopens $stdin with given file or with /dev/tty when set to true. Use when
    #             $stdin is already reading in piped data.
    # Examples:
    #     >> extend Hirb::Console
    #     => self
    #     >> menu [1,2,3], :prompt=> "So many choices, so little time: "
    #     >> menu [{:a=>1, :b=>2}, {:a=>3, :b=>4}], :fields=>[:a,b], :two_d=>true)
    #
    # source://hirb//lib/hirb/menu.rb#42
    def render(output, options = T.unsafe(nil), &block); end
  end
end

# source://hirb//lib/hirb/menu.rb#13
Hirb::Menu::CHOSEN_ARG = T.let(T.unsafe(nil), String)

# Detects valid choices and optional field/column
#
# source://hirb//lib/hirb/menu.rb#12
Hirb::Menu::CHOSEN_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://hirb//lib/hirb/menu.rb#14
Hirb::Menu::DIRECTIONS = T.let(T.unsafe(nil), String)

class Hirb::Menu::Error < ::StandardError; end

# This class provides class methods for paging and an object which can conditionally page given a terminal size that is exceeded.
class Hirb::Pager
  # @return [Pager] a new instance of Pager
  #
  # source://hirb//lib/hirb/pager.rb#59
  def initialize(width, height, options = T.unsafe(nil)); end

  # Determines if string should be paged based on configured width and height.
  #
  # @return [Boolean]
  #
  # source://hirb//lib/hirb/pager.rb#88
  def activated_by?(string_to_page, inspect_mode = T.unsafe(nil)); end

  # source://hirb//lib/hirb/pager.rb#97
  def char_count(string); end

  # Returns the value of attribute height.
  #
  # source://hirb//lib/hirb/pager.rb#57
  def height; end

  # Pages given string using configured pager.
  #
  # source://hirb//lib/hirb/pager.rb#65
  def page(string, inspect_mode); end

  # source://hirb//lib/hirb/pager.rb#102
  def resize(width, height); end

  # source://hirb//lib/hirb/pager.rb#73
  def slice!(output, inspect_mode = T.unsafe(nil)); end

  # Returns the value of attribute width.
  #
  # source://hirb//lib/hirb/pager.rb#57
  def width; end

  class << self
    # Pages using a configured or detected shell command.
    #
    # source://hirb//lib/hirb/pager.rb#6
    def command_pager(output, options = T.unsafe(nil)); end

    # Pages with a ruby-only pager which either pages or quits.
    #
    # source://hirb//lib/hirb/pager.rb#20
    def default_pager(output, options = T.unsafe(nil)); end

    # source://hirb//lib/hirb/pager.rb#10
    def pager_command(*commands); end

    # :stopdoc:
    #
    # @return [Boolean]
    #
    # source://hirb//lib/hirb/pager.rb#31
    def valid_pager_command?(cmd); end

    private

    # source://hirb//lib/hirb/pager.rb#36
    def basic_pager(output); end

    # @return [Boolean]
    #
    # source://hirb//lib/hirb/pager.rb#50
    def continue_paging?; end
  end
end

# Provides string helpers to deal with UTF-8 and ruby 1.8.x
module Hirb::String
  extend ::Hirb::String

  # source://hirb//lib/hirb/string.rb#29
  def ljust(string, desired_length); end

  # source://hirb//lib/hirb/string.rb#33
  def rjust(string, desired_length); end

  # source://hirb//lib/hirb/string.rb#25
  def size(string); end

  # source://hirb//lib/hirb/string.rb#37
  def slice(*args); end
end

# Group of handy utility functions used throughout Hirb.
module Hirb::Util
  extend ::Hirb::Util

  # Returns a constant like Module#const_get no matter what namespace it's nested in.
  # Returns nil if the constant is not found.
  #
  # source://hirb//lib/hirb/util.rb#7
  def any_const_get(name); end

  # From Rails ActiveSupport, converting undescored lowercase to camel uppercase.
  #
  # source://hirb//lib/hirb/util.rb#26
  def camelize(string); end

  # Captures STDOUT of anything run in its block and returns it as string.
  #
  # source://hirb//lib/hirb/util.rb#76
  def capture_stdout(&block); end

  # Used by Hirb::Menu to select items from an array. Array counting starts at 1. Ranges of numbers are specified with a '-' or '..'.
  # Multiple ranges can be comma delimited. Anything that isn't a valid number is ignored. All elements can be returned with a '*'.
  # Examples:
  #    1-3,5-6 -> [1,2,3,5,6]
  #    *   -> all elements in array
  #    ''  -> []
  #
  # source://hirb//lib/hirb/util.rb#36
  def choose_from_array(array, input, options = T.unsafe(nil)); end

  # Determines if a shell command exists by searching for it in ENV['PATH'].
  #
  # @return [Boolean]
  #
  # source://hirb//lib/hirb/util.rb#55
  def command_exists?(command); end

  # Returns [width, height] of terminal when detected, nil if not detected.
  # Think of this as a simpler version of Highline's Highline::SystemExtensions.terminal_size()
  #
  # source://hirb//lib/hirb/util.rb#61
  def detect_terminal_size; end

  # From Rubygems, determine a user's home.
  #
  # source://hirb//lib/hirb/util.rb#88
  def find_home; end

  # Recursively merge hash1 with hash2.
  #
  # source://hirb//lib/hirb/util.rb#21
  def recursive_hash_merge(hash1, hash2); end
end

# source://hirb//lib/hirb/version.rb#2
Hirb::VERSION = T.let(T.unsafe(nil), String)

# This class is responsible for managing all view-related functionality.
#
# == Create a View
# Let's create a simple view for Hash objects:
#   $ irb -rubygems
#   >> require 'hirb'
#   =>true
#   >> Hirb.enable
#   =>nil
#   >> require 'yaml'
#   =>true
#
#   # A view method is the smallest view
#   >> def yaml(output); output.to_yaml; end
#   => nil
#   # Add the view
#   >> Hirb.add_view Hash, :method=>:yaml
#   => true
#
#   # Hashes now appear as yaml
#   >> {:a=>1, :b=>{:c=>3}}
#   ---
#   :a : 1
#   :b :
#     :c : 3
#   => true
#
# Another way of creating a view is a Helper class:
#
#   # Create yaml view class
#   >> class Hirb::Helpers::Yaml; def self.render(output, options={}); output.to_yaml; end ;end
#   =>nil
#   # Add the view
#   >> Hirb.add_view Hash, :class=>Hirb::Helpers::Yaml
#   =>true
#
#   # Hashes appear as yaml like above ...
#
# == Configure a View
# To configure the above Helper class as a view, either pass Hirb.enable a hash:
#   # In .irbrc
#   require 'hirb'
#   # View class needs to come before enable()
#   class Hirb::Helpers::Yaml; def self.render(output, options={}); output.to_yaml; end ;end
#   Hirb.enable :output=>{"Hash"=>{:class=>"Hirb::Helpers::Yaml"}}
#
# Or create a config file at config/hirb.yml or ~/.hirb.yml:
#   # The config file for the yaml example would look like:
#   # ---
#   # :output :
#   #   Hash :
#   #    :class : Hirb::Helpers::Yaml
#
#   # In .irbrc
#   require 'hirb'
#   # View class needs to come before enable()
#   class Hirb::Helpers::Yaml; def self.render(output, options={}); output.to_yaml; end ;end
#   Hirb.enable
#
# For more about configuring Hirb, see the Config Files section in Hirb.
module Hirb::View
  class << self
    # Adds a view when View is enabled. See Formatter.add_view for more details.
    #
    # source://hirb//lib/hirb/view.rb#169
    def add(klass, view_config); end

    # Captures STDOUT and renders it using render_method(). The main use case is to conditionally page captured stdout.
    #
    # source://hirb//lib/hirb/view.rb#136
    def capture_and_render(&block); end

    # Returns the value of attribute config.
    #
    # source://hirb//lib/hirb/view.rb#258
    def config; end

    # @return [Boolean]
    #
    # source://hirb//lib/hirb/view.rb#255
    def config_loaded?; end

    # source://hirb//lib/hirb/view.rb#266
    def default_config; end

    # source://hirb//lib/hirb/view.rb#262
    def default_render_method; end

    # source://hirb//lib/hirb/view.rb#213
    def determine_terminal_size(width, height); end

    # Disable's Hirb's output and revert's irb's output method if irb exists.
    #
    # source://hirb//lib/hirb/view.rb#95
    def disable; end

    # source://hirb//lib/hirb/view.rb#193
    def disable_output_method; end

    # This activates view functionality i.e. the formatter, pager and size detection. If irb exists, it overrides irb's output
    # method with Hirb::View.view_output. When called multiple times, new configs are merged into the existing config.
    # If using Wirble, you should call this after it. The view configuration can be specified in a hash via a config file,
    # or as options to this method. In addition to the config keys mentioned in Hirb, options also take the following keys:
    # ==== Options:
    # * config_file: Name of config file(s) that are merged into existing config
    # Examples:
    #   Hirb.enable
    #   Hirb.enable :formatter=>false
    #
    # source://hirb//lib/hirb/view.rb#78
    def enable(options = T.unsafe(nil)); end

    # :stopdoc:
    #
    # source://hirb//lib/hirb/view.rb#178
    def enable_output_method; end

    # Indicates if Hirb::View is enabled.
    #
    # @return [Boolean]
    #
    # source://hirb//lib/hirb/view.rb#90
    def enabled?; end

    # source://hirb//lib/hirb/view.rb#233
    def formatter(reload = T.unsafe(nil)); end

    # source://hirb//lib/hirb/view.rb#237
    def formatter=(value); end

    # Current formatter config, storing a hash of all static views
    #
    # source://hirb//lib/hirb/view.rb#164
    def formatter_config; end

    # Current console height
    #
    # source://hirb//lib/hirb/view.rb#159
    def height; end

    # source://hirb//lib/hirb/view.rb#249
    def load_config(additional_config = T.unsafe(nil)); end

    # source://hirb//lib/hirb/view.rb#239
    def merge_or_load_config(additional_config = T.unsafe(nil)); end

    # source://hirb//lib/hirb/view.rb#218
    def page_output(output, inspect_mode = T.unsafe(nil)); end

    # source://hirb//lib/hirb/view.rb#227
    def pager; end

    # source://hirb//lib/hirb/view.rb#231
    def pager=(value); end

    # Returns the value of attribute render_method.
    #
    # source://hirb//lib/hirb/view.rb#144
    def render_method; end

    # Sets the attribute render_method
    #
    # @param value the value to set the attribute render_method to.
    #
    # source://hirb//lib/hirb/view.rb#66
    def render_method=(_arg0); end

    # source://hirb//lib/hirb/view.rb#204
    def render_output(output, options = T.unsafe(nil)); end

    # Resets render_method back to its default.
    #
    # source://hirb//lib/hirb/view.rb#149
    def reset_render_method; end

    # Resizes the console width and height for use with the table and pager i.e. after having resized the console window. *nix users
    # should only have to call this method. Non-*nix users should call this method with explicit width and height. If you don't know
    # your width and height, in irb play with "a"* width to find width and puts "a\n" * height to find height.
    #
    # source://hirb//lib/hirb/view.rb#114
    def resize(width = T.unsafe(nil), height = T.unsafe(nil)); end

    # Toggles formatter on or off.
    #
    # source://hirb//lib/hirb/view.rb#107
    def toggle_formatter; end

    # Toggles pager on or off. The pager only works while Hirb::View is enabled.
    #
    # source://hirb//lib/hirb/view.rb#102
    def toggle_pager; end

    # source://hirb//lib/hirb/view.rb#200
    def view_or_page_output(str); end

    # This is the main method of this class. When view is enabled, this method searches for a formatter it can use for the output and if
    # successful renders it using render_method(). The options this method takes are helper config hashes as described in
    # Hirb::Formatter.format_output(). Returns true if successful and false if no formatting is done or if not enabled.
    #
    # source://hirb//lib/hirb/view.rb#122
    def view_output(output, options = T.unsafe(nil)); end

    # Current console width
    #
    # source://hirb//lib/hirb/view.rb#154
    def width; end
  end
end

# source://hirb//lib/hirb/view.rb#64
Hirb::View::DEFAULT_HEIGHT = T.let(T.unsafe(nil), Integer)

# source://hirb//lib/hirb/view.rb#63
Hirb::View::DEFAULT_WIDTH = T.let(T.unsafe(nil), Integer)

# Namespace for Helpers defining multiple views in a module i.e. via DynamicView.
module Hirb::Views; end

module Hirb::Views::CouchDb
  # source://hirb//lib/hirb/views/couch_db.rb#2
  def couch_foo__base_view(obj); end

  # source://hirb//lib/hirb/views/couch_db.rb#2
  def couch_potato__persistence_view(obj); end

  # source://hirb//lib/hirb/views/couch_db.rb#2
  def couch_rest__extended_document_view(obj); end

  # source://hirb//lib/hirb/views/couch_db.rb#2
  def default_couch(obj); end
end

module Hirb::Views::MiscDb
  # source://hirb//lib/hirb/views/misc_db.rb#10
  def d_b_i__row_view(obj); end

  # source://hirb//lib/hirb/views/misc_db.rb#2
  def friendly__document_view(obj); end

  # source://hirb//lib/hirb/views/misc_db.rb#6
  def ripple__document_view(obj); end
end

module Hirb::Views::MongoDb
  # source://hirb//lib/hirb/views/mongo_db.rb#9
  def mongo_mapper__document_view(obj); end

  # source://hirb//lib/hirb/views/mongo_db.rb#9
  def mongo_mapper__embedded_document_view(obj); end

  # source://hirb//lib/hirb/views/mongo_db.rb#2
  def mongoid__document_view(obj); end
end

module Hirb::Views::ORM
  # source://hirb//lib/hirb/views/orm.rb#2
  def data_mapper__resource_view(obj); end

  # source://hirb//lib/hirb/views/orm.rb#6
  def sequel__model_view(obj); end
end

module Hirb::Views::Rails
  # source://hirb//lib/hirb/views/rails.rb#2
  def active_record__base_view(obj); end

  # source://hirb//lib/hirb/views/rails.rb#6
  def get_active_record_fields(obj); end
end

module Hirb::Views::Single; end
