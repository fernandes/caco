# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-augeas` gem.
# Please instead update this file by running `bin/tapioca gem ruby-augeas`.

# Wrapper class for the augeas[http://augeas.net] library.
class Augeas
  # Clear the +path+, i.e. make its value +nil+
  #
  # source://ruby-augeas//lib/augeas.rb#76
  def clear(path); end

  # Clear all transforms under <tt>/augeas/load</tt>. If +load+
  # is called right after this, there will be no files
  # under +/files+
  #
  # source://ruby-augeas//lib/augeas.rb#95
  def clear_transforms; end

  # Clear multiple nodes values in one operation. Find or create a node matching +sub+
  # by interpreting +sub+ as a path expression relative to each node matching
  # +base+. If +sub+ is '.', the nodes matching +base+ will be modified.
  #
  # source://ruby-augeas//lib/augeas.rb#83
  def clearm(base, sub); end

  def close; end

  # Get path expression context (from /augeas/context)
  #
  # source://ruby-augeas//lib/augeas.rb#138
  def context; end

  # Set path expression context to +path+ (in /augeas/context)
  #
  # source://ruby-augeas//lib/augeas.rb#133
  def context=(path); end

  def defnode(_arg0, _arg1, _arg2); end
  def defvar(_arg0, _arg1); end
  def error; end
  def exists(_arg0); end
  def get(_arg0); end
  def insert(_arg0, _arg1, _arg2); end
  def label(_arg0); end
  def load; end

  # The same as +load+, but raises <tt>Augeas::Error</tt> if loading fails
  #
  # @raise [Augeas::Error]
  #
  # source://ruby-augeas//lib/augeas.rb#128
  def load!; end

  def match(_arg0); end
  def mv(_arg0, _arg1); end
  def rename(_arg0, _arg1); end
  def rm(_arg0); end
  def save; end

  # The same as +save+, but raises <tt>Augeas::Error</tt> if saving fails
  #
  # @raise [Augeas::Error]
  #
  # source://ruby-augeas//lib/augeas.rb#123
  def save!; end

  # Set one or multiple elemens to path.
  # Multiple elements are mainly sensible with a path like
  # .../array[last()+1], since this will append all elements.
  #
  # source://ruby-augeas//lib/augeas.rb#64
  def set(path, *values); end

  # The same as +set+, but raises <tt>Augeas::Error</tt> if setting fails
  #
  # source://ruby-augeas//lib/augeas.rb#69
  def set!(path, *values); end

  def set_internal(_arg0, _arg1); end
  def setm(_arg0, _arg1, _arg2); end
  def span(_arg0); end
  def srun(_arg0); end
  def text_retrieve(_arg0, _arg1, _arg2, _arg3); end
  def text_store(_arg0, _arg1, _arg2); end

  # Create the +path+ with empty value if it doesn't exist
  #
  # source://ruby-augeas//lib/augeas.rb#88
  def touch(path); end

  # Add a transform under <tt>/augeas/load</tt>
  #
  # The HASH can contain the following entries
  # * <tt>:lens</tt> - the name of the lens to use
  # * <tt>:name</tt> - a unique name; use the module name of the LENS when omitted
  # * <tt>:incl</tt> - a list of glob patterns for the files to transform
  # * <tt>:excl</tt> - a list of the glob patterns to remove from the list that matches <tt>:INCL</tt>
  #
  # @raise [ArgumentError]
  #
  # source://ruby-augeas//lib/augeas.rb#106
  def transform(hash); end

  class << self
    # Create a new Augeas instance and return it.
    #
    # Use +root+ as the filesystem root. If +root+ is +nil+, use the value
    # of the environment variable +AUGEAS_ROOT+. If that doesn't exist
    # either, use "/".
    #
    # +loadpath+ is a colon-spearated list of directories that modules
    # should be searched in. This is in addition to the standard load path
    # and the directories in +AUGEAS_LENS_LIB+
    #
    # +flags+ is a bitmask (see <tt>enum aug_flags</tt>)
    #
    # When a block is given, the Augeas instance is passed as the only
    # argument into the block and closed when the block exits. In that
    # case, the return value of the block is the return value of
    # +open+. With no block, the Augeas instance is returned.
    #
    # source://ruby-augeas//lib/augeas.rb#47
    def open(root = T.unsafe(nil), loadpath = T.unsafe(nil), flags = T.unsafe(nil), &block); end

    def open3(_arg0, _arg1, _arg2); end
  end
end

Augeas::ECMDRUN = T.let(T.unsafe(nil), Integer)
Augeas::EINTERNAL = T.let(T.unsafe(nil), Integer)
Augeas::EMMATCH = T.let(T.unsafe(nil), Integer)
Augeas::EMXFM = T.let(T.unsafe(nil), Integer)
Augeas::ENABLE_SPAN = T.let(T.unsafe(nil), Integer)
Augeas::ENOLENS = T.let(T.unsafe(nil), Integer)
Augeas::ENOMATCH = T.let(T.unsafe(nil), Integer)
Augeas::ENOMEM = T.let(T.unsafe(nil), Integer)
Augeas::ENOSPAN = T.let(T.unsafe(nil), Integer)
Augeas::EPATHX = T.let(T.unsafe(nil), Integer)
Augeas::ESYNTAX = T.let(T.unsafe(nil), Integer)
class Augeas::Error < ::RuntimeError; end
Augeas::NOERROR = T.let(T.unsafe(nil), Integer)
Augeas::NONE = T.let(T.unsafe(nil), Integer)
Augeas::NO_LOAD = T.let(T.unsafe(nil), Integer)
Augeas::NO_MODL_AUTOLOAD = T.let(T.unsafe(nil), Integer)
Augeas::NO_STDINC = T.let(T.unsafe(nil), Integer)
Augeas::SAVE_BACKUP = T.let(T.unsafe(nil), Integer)
Augeas::SAVE_NEWFILE = T.let(T.unsafe(nil), Integer)
Augeas::SAVE_NOOP = T.let(T.unsafe(nil), Integer)
Augeas::TYPE_CHECK = T.let(T.unsafe(nil), Integer)
