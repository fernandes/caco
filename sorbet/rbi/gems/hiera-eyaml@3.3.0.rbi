# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hiera-eyaml` gem.
# Please instead update this file by running `bin/tapioca gem hiera-eyaml`.

# require 'hiera/backend/eyaml/subcommands/unknown_command'
class Hiera; end

module Hiera::Backend; end

module Hiera::Backend::Eyaml
  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#23
    def default_encryption_scheme; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#19
    def default_encryption_scheme=(new_encryption); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#15
    def subcommand; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#11
    def subcommand=(command); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#41
    def subcommands; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#37
    def subcommands=(commands); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#32
    def verbosity_level; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml.rb#28
    def verbosity_level=(new_verbosity_level); end
  end
end

# source://hiera-eyaml//lib/hiera/backend/eyaml.rb#6
Hiera::Backend::Eyaml::DESCRIPTION = T.let(T.unsafe(nil), String)

class Hiera::Backend::Eyaml::EncryptHelper
  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encrypthelper.rb#23
    def ensure_key_dir_exists(key_file); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encrypthelper.rb#9
    def write_important_file(args); end
  end
end

class Hiera::Backend::Eyaml::Encryptor
  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#66
    def debug(msg); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#28
    def decode(string); end

    # @raise [StandardError]
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#36
    def decrypt(*args); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#24
    def encode(binary_string); end

    # @raise [StandardError]
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#32
    def encrypt(*args); end

    # @raise [StandardError]
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#15
    def find(encryption_scheme = T.unsafe(nil)); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#58
    def format_message(msg); end

    # @return [Boolean]
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#54
    def hiera?; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#70
    def info(msg); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#50
    def option(name); end

    # Returns the value of attribute options.
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#11
    def options; end

    # Sets the attribute options
    #
    # @param value the value to set the attribute options to.
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#11
    def options=(_arg0); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#42
    def plugin_classname; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#46
    def register; end

    # Returns the value of attribute tag.
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#12
    def tag; end

    # Sets the attribute tag
    #
    # @param value the value to set the attribute tag to.
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#12
    def tag=(_arg0); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#62
    def trace(msg); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/encryptor.rb#74
    def warn(msg); end
  end
end

class Hiera::Backend::Eyaml::LoggingHelper
  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#58
    def colorize(message, color); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#37
    def debug(messageinfo); end

    # @return [Boolean]
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#73
    def hiera?; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#33
    def info(messageinfo); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#45
    def print_message(args); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#9
    def structure_message(messageinfo); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#41
    def trace(messageinfo); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/logginghelper.rb#29
    def warn(messageinfo); end
  end
end

class Hiera::Backend::Eyaml::Options
  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml/options.rb#11
    def [](key); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/options.rb#6
    def []=(key, value); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/options.rb#16
    def set(hash); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/options.rb#23
    def trace; end
  end
end

module Hiera::Backend::Eyaml::Parser; end

class Hiera::Backend::Eyaml::Parser::DecBlockTokenType < ::Hiera::Backend::Eyaml::Parser::TokenType
  # @return [DecBlockTokenType] a new instance of DecBlockTokenType
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#158
  def initialize; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#162
  def create_token(string); end
end

class Hiera::Backend::Eyaml::Parser::DecStringTokenType < ::Hiera::Backend::Eyaml::Parser::TokenType
  # @return [DecStringTokenType] a new instance of DecStringTokenType
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#143
  def initialize; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#147
  def create_token(string); end
end

class Hiera::Backend::Eyaml::Parser::EncBlockTokenType < ::Hiera::Backend::Eyaml::Parser::EncTokenType
  # @return [EncBlockTokenType] a new instance of EncBlockTokenType
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#132
  def initialize; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#136
  def create_token(string); end
end

class Hiera::Backend::Eyaml::Parser::EncHieraTokenType < ::Hiera::Backend::Eyaml::Parser::EncTokenType
  # @return [EncHieraTokenType] a new instance of EncHieraTokenType
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#110
  def initialize; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#115
  def create_token(string); end
end

class Hiera::Backend::Eyaml::Parser::EncStringTokenType < ::Hiera::Backend::Eyaml::Parser::EncTokenType
  # @return [EncStringTokenType] a new instance of EncStringTokenType
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#121
  def initialize; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#125
  def create_token(string); end
end

class Hiera::Backend::Eyaml::Parser::EncToken < ::Hiera::Backend::Eyaml::Parser::Token
  # @return [EncToken] a new instance of EncToken
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#47
  def initialize(format, plain_text, encryptor, cipher, match = T.unsafe(nil), indentation = T.unsafe(nil), id = T.unsafe(nil)); end

  # Returns the value of attribute cipher.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#14
  def cipher; end

  # Returns the value of attribute encryptor.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#14
  def encryptor; end

  # Returns the value of attribute format.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#14
  def format; end

  # Returns the value of attribute id.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#14
  def id; end

  # Returns the value of attribute indentation.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#14
  def indentation; end

  # Returns the value of attribute plain_text.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#14
  def plain_text; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#79
  def to_decrypted(args = T.unsafe(nil)); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#57
  def to_encrypted(args = T.unsafe(nil)); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#97
  def to_plain_text; end

  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#22
    def decrypted_value(format, plain_text, encryption_scheme, match, id, indentation = T.unsafe(nil)); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#43
    def encrypt_unchanged; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#16
    def encrypted_value(format, encryption_scheme, cipher, match, indentation = T.unsafe(nil)); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#29
    def plain_text_value(format, plain_text, encryption_scheme, match, id, indentation = T.unsafe(nil)); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#39
    def set_encrypt_unchanged(encrypt_unchanged); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#35
    def tokens_map; end
  end
end

class Hiera::Backend::Eyaml::Parser::EncTokenType < ::Hiera::Backend::Eyaml::Parser::TokenType
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/encrypted_tokens.rb#103
  def create_enc_token(match, type, enc_comma, cipher, indentation = T.unsafe(nil)); end
end

class Hiera::Backend::Eyaml::Parser::NonMatchToken < ::Hiera::Backend::Eyaml::Parser::Token
  # @return [NonMatchToken] a new instance of NonMatchToken
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#33
  def initialize(non_match); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#39
  def to_decrypted(args = T.unsafe(nil)); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#36
  def to_encrypted(args = T.unsafe(nil)); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#42
  def to_plain_text; end
end

class Hiera::Backend::Eyaml::Parser::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/parser.rb#31
  def initialize(token_types); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/parser.rb#35
  def parse(text); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/parser.rb#39
  def parse_scanner(s); end

  # Returns the value of attribute token_types.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/parser.rb#29
  def token_types; end
end

class Hiera::Backend::Eyaml::Parser::ParserFactory
  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/parser.rb#16
    def decrypted_parser; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/parser.rb#10
    def encrypted_parser; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/parser.rb#22
    def hiera_backend_parser; end
  end
end

class Hiera::Backend::Eyaml::Parser::Token
  # @return [Token] a new instance of Token
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#15
  def initialize(match); end

  # Returns the value of attribute match.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#14
  def match; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#21
  def to_decrypted(args = T.unsafe(nil)); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#18
  def to_encrypted(args = T.unsafe(nil)); end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#24
  def to_plain_text; end

  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#27
  def to_s; end
end

class Hiera::Backend::Eyaml::Parser::TokenType
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#8
  def create_token(string); end

  # Returns the value of attribute regex.
  #
  # source://hiera-eyaml//lib/hiera/backend/eyaml/parser/token.rb#6
  def regex; end
end

class Hiera::Backend::Eyaml::RecoverableError < ::StandardError; end

class Hiera::Backend::Eyaml::Utils
  class << self
    # source://hiera-eyaml//lib/hiera/backend/eyaml/utils.rb#10
    def camelcase(string); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/utils.rb#59
    def convert_to_utf_8(string); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/utils.rb#45
    def find_all_subclasses_of(args); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/utils.rb#20
    def find_closest_class(args); end

    # @return [Boolean]
    #
    # source://hiera-eyaml//lib/hiera/backend/eyaml/utils.rb#55
    def hiera?; end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/utils.rb#35
    def require_dir(classdir); end

    # source://hiera-eyaml//lib/hiera/backend/eyaml/utils.rb#15
    def snakecase(string); end
  end
end

# source://hiera-eyaml//lib/hiera/backend/eyaml.rb#5
Hiera::Backend::Eyaml::VERSION = T.let(T.unsafe(nil), String)
