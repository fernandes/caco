# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `declarative` gem.
# Please instead update this file by running `bin/tapioca gem declarative`.

module Declarative::DeepDup
  class << self
    # source://declarative//lib/declarative/deep_dup.rb#5
    def call(args); end

    # source://declarative//lib/declarative/deep_dup.rb#17
    def dup_items(arr); end
  end
end

# {Defaults} is a mutable DSL object that collects default directives via #merge!.
# Internally, it uses {Variables} to implement the merging of defaults.
class Declarative::Defaults
  # @return [Defaults] a new instance of Defaults
  #
  # source://declarative//lib/declarative/defaults.rb#5
  def initialize; end

  # Evaluate defaults and merge given_options into them.
  #
  # source://declarative//lib/declarative/defaults.rb#20
  def call(name, given_options); end

  # source://caco/0.1.0/lib/caco.rb#15
  def handle_array_and_deprecate(variables); end

  # Set default values. Usually called in Schema::defaults.
  # This can be called multiple times and will "deep-merge" arrays, e.g. `_features: []`.
  #
  # source://declarative//lib/declarative/defaults.rb#12
  def merge!(hash = T.unsafe(nil), &block); end

  class << self
    # Wrap arrays in `variables` with Variables::Append so they get appended to existing
    # same-named arrays.
    #
    # source://declarative//lib/declarative/defaults.rb#38
    def wrap_arrays(variables); end
  end
end

class Declarative::Definitions < ::Hash
  # @return [Definitions] a new instance of Definitions
  #
  # source://declarative//lib/declarative/definitions.rb#24
  def initialize(definition_class); end

  # #add is high-level behavior for Definitions#[]=.
  # reserved options:
  #   :_features
  #   :_defaults
  #   :_base
  #   :_nested_builder
  #
  # source://declarative//lib/declarative/definitions.rb#39
  def add(name, options = T.unsafe(nil), &block); end

  # TODO : test me!
  #
  # source://declarative//lib/declarative/definitions.rb#29
  def each(&block); end

  # source://declarative//lib/declarative/definitions.rb#64
  def get(name); end

  private

  # Run builder to create nested schema (or twin, or representer, or whatever).
  #
  # source://declarative//lib/declarative/definitions.rb#70
  def build_nested(options); end
end

class Declarative::Definitions::Definition
  # @return [Definition] a new instance of Definition
  #
  # source://declarative//lib/declarative/definitions.rb#4
  def initialize(name, options = T.unsafe(nil)); end

  # source://declarative//lib/declarative/definitions.rb#9
  def [](name); end

  # TODO: should be called #copy.
  #
  # source://declarative//lib/declarative/definitions.rb#18
  def merge(hash); end

  # TODO: this should return a new Definition instance.
  #
  # source://declarative//lib/declarative/definitions.rb#13
  def merge!(hash); end
end

class Declarative::Heritage < ::Array
  # Replay the recorded assignments on inheritor.
  # Accepts a block that will allow processing the arguments for every recorded statement.
  #
  # source://declarative//lib/declarative/heritage.rb#12
  def call(inheritor, &block); end

  # Record inheritable assignments for replay in an inheriting class.
  #
  # source://declarative//lib/declarative/heritage.rb#6
  def record(method, *args, &block); end

  private

  # @yield [cfg]
  #
  # source://declarative//lib/declarative/heritage.rb#39
  def call!(inheritor, cfg); end
end

module Declarative::Heritage::DSL
  # source://declarative//lib/declarative/heritage.rb#17
  def heritage; end
end

# To be included into modules using Heritage. When included, inherits the heritage.
module Declarative::Heritage::Included
  # source://declarative//lib/declarative/heritage.rb#32
  def included(mod); end
end

# To be extended into classes using Heritage. Inherits the heritage.
module Declarative::Heritage::Inherited
  # source://declarative//lib/declarative/heritage.rb#24
  def inherited(subclass); end
end

# Include this to maintain inheritable, nested schemas with ::defaults and
# ::feature the way we have it in Representable, Reform, and Disposable.
#
# The schema with its defnitions will be kept in ::definitions.
#
# Requirements to includer: ::default_nested_class, override building with ::nested_builder.
module Declarative::Schema
  class << self
    # @private
    #
    # source://declarative//lib/declarative/schema.rb#14
    def extended(extender); end
  end
end

module Declarative::Schema::DSL
  # source://declarative//lib/declarative/schema.rb#28
  def defaults(options = T.unsafe(nil), &block); end

  # TODO: test me.
  #
  # source://declarative//lib/declarative/schema.rb#42
  def definition_class; end

  # source://declarative//lib/declarative/schema.rb#38
  def definitions; end

  # source://declarative//lib/declarative/schema.rb#22
  def property(name, options = T.unsafe(nil), &block); end

  private

  # source://declarative//lib/declarative/schema.rb#59
  def _defaults; end

  # source://declarative//lib/declarative/schema.rb#47
  def build_definition(name, options = T.unsafe(nil), &block); end

  # source://declarative//lib/declarative/schema.rb#63
  def nested_builder; end

  # When called, executes `block` and wraps all array values in Variables::Append.
  # This is the default behavior in older versions and allows to provide arrays for
  # default values that will be prepended.
  #
  # source://declarative//lib/declarative/schema.rb#77
  def wrap_arrays_from_block(block); end
end

# source://declarative//lib/declarative/schema.rb#67
Declarative::Schema::DSL::NestedBuilder = T.let(T.unsafe(nil), Proc)

module Declarative::Schema::Feature
  # features are registered as defaults using _features, which in turn get translated to
  # Class.new... { feature mod } which makes it recursive in nested schemas.
  #
  # source://declarative//lib/declarative/schema.rb#88
  def feature(*mods); end

  private

  # source://declarative//lib/declarative/schema.rb#96
  def register_feature(mod); end
end

# source://declarative//lib/declarative/version.rb#2
Declarative::VERSION = T.let(T.unsafe(nil), String)

# Implements the pattern of maintaining a hash of key/values (usually "defaults")
# that are mutated several times by user and library code (override defaults).
#
# The Variables instance then represents the configuration data to be processed by the
# using library (e.g. Representable or Trailblazer).
class Declarative::Variables
  class << self
    # source://declarative//lib/declarative/variables.rb#32
    def Append(appended_array); end

    # source://declarative//lib/declarative/variables.rb#26
    def Merge(merged_hash); end

    # @return Hash hash where `overrides` is merged onto `defaults` respecting Merge, Append etc.
    #
    # source://declarative//lib/declarative/variables.rb#12
    def merge(defaults, overrides); end
  end
end

class Declarative::Variables::Proc < ::Proc; end
