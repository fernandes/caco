# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `trailblazer-operation` gem.
# Please instead update this file by running `bin/tapioca gem trailblazer-operation`.

# TODO: REMOVE IN 2.2.
module Trailblazer
  class << self
    # source://trailblazer-context/0.5.1/lib/trailblazer/context.rb#29
    def Context(wrapped_options, mutable_options = T.unsafe(nil), context_options = T.unsafe(nil)); end

    # DISCUSS: where do we need this?
    #
    # source://trailblazer-operation//lib/trailblazer/operation.rb#34
    def Operation(options); end

    # source://trailblazer-option/0.1.2/lib/trailblazer/option.rb#54
    def Option(value); end
  end
end

module Trailblazer::Activity::Operation
  class << self
    # source://trailblazer-operation//lib/trailblazer/operation.rb#22
    def OptionsForState; end
  end
end

module Trailblazer::Activity::Railway::End; end
class Trailblazer::Activity::Railway::End::FailFast < ::Trailblazer::Activity::Railway::End::Failure; end
class Trailblazer::Activity::Railway::End::Failure < ::Trailblazer::Activity::End; end
class Trailblazer::Activity::Railway::End::PassFast < ::Trailblazer::Activity::Railway::End::Success; end

# @private
class Trailblazer::Activity::Railway::End::Success < ::Trailblazer::Activity::End; end

module Trailblazer::Cells; end

# source://trailblazer-cells/0.0.3/lib/trailblazer/cells/version.rb#3
Trailblazer::Cells::VERSION = T.let(T.unsafe(nil), String)

# The use of this module is currently not encouraged and it is only here for backward-compatibility.
# Instead, please pass dependencies via containers, locals, or macros into the respective steps.
module Trailblazer::Operation::ClassDependencies
  # source://trailblazer-operation//lib/trailblazer/operation/class_dependencies.rb#7
  def [](field); end

  # Store a field on @state, which is provided by {Strategy}.
  #
  # source://trailblazer-operation//lib/trailblazer/operation/class_dependencies.rb#12
  def []=(field, value); end

  # source://trailblazer-operation//lib/trailblazer/operation/class_dependencies.rb#31
  def call_with_circuit_interface(_arg0, **circuit_options); end

  # source://trailblazer-operation//lib/trailblazer/operation/class_dependencies.rb#18
  def options_for_public_call(options, flow_options); end

  private

  # source://trailblazer-operation//lib/trailblazer/operation/class_dependencies.rb#23
  def class_fields; end

  # source://trailblazer-operation//lib/trailblazer/operation/class_dependencies.rb#27
  def context_for_fields(fields, _arg1, **_arg2); end
end

module Trailblazer::Operation::DeprecatedMacro
  class << self
    # Allows old macros with the `(input, options)` signature.
    #
    # source://trailblazer-operation//lib/trailblazer/operation/deprecated_macro.rb#5
    def call(proc, options); end
  end
end

module Trailblazer::Operation::PublicCall
  # This is the outer-most public `call` method that gets invoked when calling `Create.()`.
  # The signature of this is `params, options, *containers`. This was a mistake, as the
  # first argument could've been part of `options` hash in the first place.
  #
  # Create.(params, runtime_data, *containers)
  #   #=> Result<Context...>
  #
  # In workflows/Nested compositions, this method is not used anymore and it might probably
  # get removed in future versions of TRB. Currently, we use Operation::__call__ as an alternative.
  #
  # @note Do not override this method as it will be removed in future versions. Also, you will break tracing.
  # @return Operation::Railway::Result binary result object
  #
  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#16
  def call(options = T.unsafe(nil), flow_options = T.unsafe(nil), **circuit_options); end

  # DISCUSS: copied from {TaskWrap.call_task}.
  #
  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#89
  def call_task(wrap_ctx, original_args); end

  # This interface is used for all nested OPs (and the outer-most, too).
  #
  # @param args [Array] - Contains [ctx, flow_options]
  # @param circuit_options [Hash] - Options to configure activity circuit
  # @private
  # @return [signal, [ctx, flow_options]]
  #
  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#60
  def call_with_circuit_interface(args, **circuit_options); end

  # TODO: remove when we stop supporting < 3.0.
  #
  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#80
  def call_with_flow_options(options, flow_options); end

  # Default {@activity} call interface which doesn't accept {circuit_options}
  #
  # @param args [Array] => [ctx, flow_options]
  # @private
  # @return [Operation::Railway::Result]
  #
  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#29
  def call_with_public_interface(options, flow_options, invoke_class: T.unsafe(nil), **circuit_options); end

  # @semi=public
  #
  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#75
  def flow_options_for_public_call(options = T.unsafe(nil)); end

  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#85
  def initial_wrap_static(*_arg0); end

  # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#64
  def options_for_public_call(*args); end

  class << self
    # Compile a Context object to be passed into the Activity::call.
    #
    # @private
    #
    # source://trailblazer-operation//lib/trailblazer/operation/public_call.rb#70
    def options_for_public_call(options, flow_options = T.unsafe(nil)); end
  end
end

# End event: All subclasses of End:::Success are interpreted as "success".
module Trailblazer::Operation::Railway
  class << self
    # @param options Context
    # @param end_event The last emitted signal in a circuit is usually the end event.
    #
    # source://trailblazer-operation//lib/trailblazer/operation/railway.rb#14
    def Result(end_event, options, *_arg2); end

    # source://trailblazer-operation//lib/trailblazer/operation/railway.rb#8
    def fail!; end

    # source://trailblazer-operation//lib/trailblazer/operation/railway.rb#10
    def fail_fast!; end

    # source://trailblazer-operation//lib/trailblazer/operation/railway.rb#9
    def pass!; end

    # source://trailblazer-operation//lib/trailblazer/operation/railway.rb#11
    def pass_fast!; end
  end
end

module Trailblazer::Operation::Railway::End; end

# source://trailblazer-operation//lib/trailblazer/operation/railway.rb#31
Trailblazer::Operation::Railway::End::Failure = Trailblazer::Activity::Railway::End::Failure

# source://trailblazer-operation//lib/trailblazer/operation/railway.rb#30
Trailblazer::Operation::Railway::End::Success = Trailblazer::Activity::Railway::End::Success

# source://trailblazer-operation//lib/trailblazer/operation/railway/macaroni.rb#21
Trailblazer::Operation::Railway::KwSignature = Trailblazer::Operation::Railway::Macaroni

# Call the user's steps with a differing API (inspired by Maciej Mensfeld) that
# only receives keyword args. The `options` keyword is the stateful context object
#
#   def my_step( params:, ** )
#   def my_step( params:, options:, ** )
module Trailblazer::Operation::Railway::Macaroni
  class << self
    # source://trailblazer-operation//lib/trailblazer/operation/railway/macaroni.rb#9
    def call(user_proc); end
  end
end

class Trailblazer::Operation::Railway::Macaroni::Option < ::Trailblazer::Option
  class << self
    # The Option#call! method prepares the arguments.
    #
    # source://trailblazer-operation//lib/trailblazer/operation/railway/macaroni.rb#15
    def call!(proc, options, *_arg2); end
  end
end

# The Railway::Result knows about its binary state, the context (data), and the last event in the circuit.
class Trailblazer::Operation::Railway::Result < ::Trailblazer::Operation::Result
  # Operation::Result
  #
  # @return [Result] a new instance of Result
  #
  # source://trailblazer-operation//lib/trailblazer/operation/railway.rb#20
  def initialize(success, data, event); end

  # Returns the value of attribute event.
  #
  # source://trailblazer-operation//lib/trailblazer/operation/railway.rb#26
  def event; end
end

class Trailblazer::Operation::Result
  extend ::Forwardable

  # @param success Boolean validity of the result object
  # @param data Context
  # @return [Result] a new instance of Result
  #
  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#5
  def initialize(success, data); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#13
  def failure?; end

  # DISCUSS: the two methods below are more for testing.
  #
  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#29
  def inspect(*slices); end

  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#21
  def keys; end

  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#35
  def slice(*keys); end

  # @return [Boolean]
  #
  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#9
  def success?; end

  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#17
  def to_hash; end

  private

  # Returns the value of attribute data.
  #
  # source://trailblazer-operation//lib/trailblazer/operation/result.rb#41
  def data; end
end

module Trailblazer::Operation::Trace
  # `Operation::trace` is included for simple tracing of the flow.
  # It simply forwards all arguments to `Trace.call`.
  #
  # source://trailblazer-operation//lib/trailblazer/operation/trace.rb#25
  def trace(options); end

  # @return [Boolean]
  #
  # source://trailblazer-operation//lib/trailblazer/operation/trace.rb#29
  def wtf?(options); end

  class << self
    # @note The problem in this method is, we have redundancy with Operation::PublicCall
    #
    # source://trailblazer-operation//lib/trailblazer/operation/trace.rb#8
    def call(operation, options); end
  end
end

# Presentation of the traced stack via the returned result object.
# This object is wrapped around the original result in {Trace.call}.
class Trailblazer::Operation::Trace::Result < ::SimpleDelegator
  # @return [Result] a new instance of Result
  #
  # source://trailblazer-operation//lib/trailblazer/operation/trace.rb#36
  def initialize(result, stack); end

  # TODO: deprecate!
  #
  # source://trailblazer-operation//lib/trailblazer/operation/trace.rb#42
  def wtf; end

  # TODO: deprecate!
  #
  # @return [Boolean]
  #
  # source://trailblazer-operation//lib/trailblazer/operation/trace.rb#47
  def wtf?; end
end

module Trailblazer::Version; end
module Trailblazer::Version::Activity; end

# source://trailblazer-activity/0.15.0/lib/trailblazer/activity/version.rb#4
Trailblazer::Version::Activity::VERSION = T.let(T.unsafe(nil), String)

module Trailblazer::Version::Developer; end

# source://trailblazer-developer/0.0.27/lib/trailblazer/developer/version.rb#4
Trailblazer::Version::Developer::VERSION = T.let(T.unsafe(nil), String)

module Trailblazer::Version::Operation; end

# source://trailblazer-operation//lib/trailblazer/operation/version.rb#4
Trailblazer::Version::Operation::VERSION = T.let(T.unsafe(nil), String)

# source://trailblazer/2.1.2/lib/trailblazer/version.rb#3
Trailblazer::Version::VERSION = T.let(T.unsafe(nil), String)
